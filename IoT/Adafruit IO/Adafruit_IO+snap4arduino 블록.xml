<blocks app="Snap4Arduino 1.2.7
, http://snap4arduino.rocks" version="1"><block-definition s="%&apos;method&apos; url: %&apos;url&apos; send: %&apos;payload&apos; headers: %&apos;headers&apos;" type="reporter" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s" readonly="true">GET<options>GET
POST
PUT
DELETE</options></input><input type="%s">http://snap.berkeley.edu</input><input type="%s"></input><input type="%mult%l" readonly="true"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>method</l><l>url</l><l>data</l><l>headers</l><l>proc</l></list><l>var response, i, header;&#xD;if (!proc.httpRequest) {&#xD;  proc.httpRequest = new XMLHttpRequest();&#xD;  proc.httpRequest.open(method, url, true);&#xD;  proc.assertType(headers, &apos;list&apos;);&#xD;  for (i = 1; i &lt;= headers.length(); i += 1) {&#xD;    header = headers.at(i);&#xD;    proc.assertType(header, &apos;list&apos;);&#xD;    proc.httpRequest.setRequestHeader(&#xD;      header.at(1),&#xD;      header.at(2)&#xD;    );&#xD;  }&#xD;  proc.httpRequest.send(data || null);&#xD;} else if (proc.httpRequest.readyState === 4) {&#xD;  response = proc.httpRequest.responseText;&#xD;  proc.httpRequest = null;&#xD;  return response;&#xD;}&#xD;proc.pushContext(&apos;doYield&apos;);&#xD;proc.pushContext();</l></block><list><block var="method"/><block var="url"/><block var="payload"/><block var="headers"/></list></block></block></script></block-definition><block-definition s="key: %&apos;key&apos; value: %&apos;value&apos;" type="reporter" category="operators"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input></inputs><script><block s="doReport"><block s="reportNewList"><list><block var="key"/><block var="value"/></list></block></block></script></block-definition><block-definition s="Adafruit.io 최근 데이터 가져오기 UserName: %&apos;userName&apos; X-AIO-Key: %&apos;x-aio-key&apos; feed: %&apos;feed&apos;" type="reporter" category="other"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input><input type="%s"></input></inputs><script><block s="doReport"><custom-block s="value at key %s of %l"><l>value</l><custom-block s="listify %s"><custom-block s="%s url: %s send: %s headers: %mult%l"><l>GET</l><block s="reportJoinWords"><list><l>http://io.adafruit.com/api/v2/</l><block var="userName"/><l>/feeds/</l><block var="feed"/><l>/data/last</l></list></block><l></l><list><block s="reportNewList"><list><l>X-AIO-Key</l><block var="x-aio-key"/></list></block></list></custom-block></custom-block></custom-block></block></script></block-definition><block-definition s="listify %&apos;jsonString&apos;" type="reporter" category="operators"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>jsonString</l></list><l>return listify(JSON.parse(jsonString));&#xD;&#xD;function listify(jsonObject) {&#xD;  if (jsonObject instanceof Array) {&#xD;    return new List(jsonObject.map(function(eachElement) { return listify(eachElement)}));&#xD;  } else if (jsonObject instanceof Object) {&#xD;    return new List(Object.keys(jsonObject).map(function(eachKey) { return new List([eachKey,listify(jsonObject[eachKey])])} ))&#xD;  } else {&#xD;    return jsonObject&#xD;  }&#xD;}</l></block><list><block var="jsonString"/></list></block></block></script></block-definition><block-definition s="value at key %&apos;key&apos; of %&apos;lst&apos;" type="reporter" category="operators"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%l"></input></inputs><script><block s="doWarp"><script><block s="doForEach"><l>each item</l><block var="lst"/><script><block s="doIf"><block s="reportEquals"><block s="reportListItem"><l>1</l><block var="each item"/></block><block var="key"/></block><script><block s="doReport"><block s="reportListItem"><l>2</l><block var="each item"/></block></block></script></block></script></block></script></block><block s="doReport"><l></l></block></script></block-definition><block-definition s="Adafruit.io 데이터 기록하기 UserName: %&apos;userName&apos; X-AIO-Key: %&apos;x-aio-key&apos; feed: %&apos;feed&apos; 값: %&apos;value&apos;" type="command" category="other"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input><input type="%s"></input><input type="%s"></input></inputs><script><block s="doReport"><custom-block s="%s url: %s send: %s headers: %mult%l"><l>POST</l><block s="reportJoinWords"><list><l>http://io.adafruit.com/api/v2/</l><block var="userName"/><l>/feeds/</l><block var="feed"/><l>/data</l></list></block><block s="reportJoinWords"><list><l>{"value":"</l><block var="value"/><l>"}</l></list></block><list><block s="reportNewList"><list><l>Content-Type</l><l>application/json</l></list></block><block s="reportNewList"><list><l>X-AIO-Key</l><block var="x-aio-key"/></list></block></list></custom-block></block></script></block-definition><block-definition s="Adafruit 새 피드 만들기 UserName: %&apos;username&apos; X-AIO-Key: %&apos;x-aio-key&apos; FeedName: %&apos;feed&apos;" type="command" category="other"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input><input type="%s"></input></inputs><script><block s="doReport"><custom-block s="%s url: %s send: %s headers: %mult%l"><l>POST</l><block s="reportJoinWords"><list><l>http://io.adafruit.com/api/v2/</l><block var="username"/><l>/feeds</l></list></block><block s="reportJoinWords"><list><l>{"name":"</l><block var="feed"/><l>"}</l></list></block><list><block s="reportNewList"><list><l>Content-Type</l><l>application/json</l></list></block><block s="reportNewList"><list><l>X-AIO-Key</l><block var="x-aio-key"/></list></block></list></custom-block></block></script></block-definition></blocks>